
/*
Cleaning data in SQL Queries. There are a ton more things I would do to optimize this data!
*/

--"Selects everything"
--Select *
--From PortfolioProject.dbo.NashvilleHousing

--Standardize Data Formate------------------------------------------------

Select SaleDateConverted, CONVERT(Date,SaleDate)
From PortfolioProject.dbo.NashvilleHousing
--isnt working, will use the alter method
Update NashvilleHousing
SET SaleDate =CONVERT(Date,SaleDate)

--resolved issue with not updating table colunn date formate correctly
ALTER TABLE NashvilleHousing
Add SaleDateConverted Date;

Update NashvilleHousing
SET SaleDateConverted =CONVERT(Date,SaleDate)


--Populate Property Address data------------------------------------------------
/*
Property Address don't change. Therfore, it could be populated
if we have reference point
*/

Select *
From PortfolioProject.dbo.NashvilleHousing
--Where PropertyAddress is null
order by ParcelID


/* need to do a self join. Joining a table to itself in order to populate 
itself correctly
*/
														--if null, then takes b adrress, and sticks it into a adress null
Select a.ParcelID, a.ParcelID, b.ParcelID, b.PropertyAddress, ISNULL(a.PropertyAddress,b.PropertyAddress)
From PortfolioProject.dbo.NashvilleHousing a
JOIN PortfolioProject.dbo.NashvilleHousing b
 on a.ParcelID = b.ParcelID
 AND a.[UniqueID ] <> b.[UniqueID ] --This means that they will never repeat themselves. 
 Where a.PropertyAddress is null
--Parcel ID with Null adress, but not populated yet. 


--write update
update a
SET PropertyAddress = ISNULL(a.PropertyAddress,b.PropertyAddress) --review, if a null replace with b
From PortfolioProject.dbo.NashvilleHousing a
JOIN PortfolioProject.dbo.NashvilleHousing b
 on a.ParcelID = b.ParcelID
 AND a.[UniqueID ] <> b.[UniqueID ]
Where a.PropertyAddress is null


--Breaking otu adress into Individual Columns (Address, City, State)------------------------------------------------

Select PropertyAddress
From PortfolioProject.dbo.NashvilleHousing
--Where PropertyAddress is null
--order by ParcelID

/*
Substring search starting at first valuewithin Property Address column and going until the comma ( , , WhereYouAreLooking)

CHARINDEX(',', PropertyAddress) -1 gives a number position for comma location
add -1 to remove the comma in the search (goes to comma, goes back 1)
*/
SELECT		
SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1) as Address
, SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) +1 ,LEN(PropertyAddress)) as Address
--+1 

 From PortfolioProject.dbo.NashvilleHousing

 ALTER TABLE NashvilleHousing
Add PropertySplitAddress Nvarchar(255);

Update NashvilleHousing
SET PropertySplitAddress = SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1)

ALTER TABLE NashvilleHousing
Add PropertySplitCity Nvarchar(255);

Update NashvilleHousing
SET PropertySplitCity = SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) +1 ,LEN(PropertyAddress))


--Can use this to check the two new columns. They're added at the en dof the table

Select* 
From PortfolioProject.dbo.NashvilleHousing



--Just looking at owner address. We have the address, city, and the state. We'd like to split all of them out
Select OwnerAddress
From PortfolioProject.dbo.NashvilleHousing

--Parse name usefull for delimited stuff. Far simpler than the substring method


Select		--Find comma, replace with period
PARSENAME(REPLACE(OwnerAddress, ',', '.'),3)
, PARSENAME(REPLACE(OwnerAddress, ',', '.'),2)
, PARSENAME(REPLACE(OwnerAddress, ',', '.'),1)
From PortfolioProject.dbo.NashvilleHousing

--I would alter all first, then update everything last. 

 ALTER TABLE NashvilleHousing
Add OwnerSplitAddress Nvarchar(255);

Update NashvilleHousing
SET OwnerSplitAddress = PARSENAME(REPLACE(OwnerAddress, ',', '.'),3)

ALTER TABLE NashvilleHousing
Add OwnerSplitCity Nvarchar(255);

Update NashvilleHousing
SET OwnerSplitCity = PARSENAME(REPLACE(OwnerAddress, ',', '.'),2) 


ALTER TABLE NashvilleHousing
Add OwnerSplitState Nvarchar(255);

Update NashvilleHousing
SET OwnerSplitState = PARSENAME(REPLACE(OwnerAddress, ',', '.'),1)


--Select* 
--From PortfolioProject.dbo.NashvilleHousing

--Change Y and N to Yes and No in "Sold as Vacant" field

Select Distinct (SoldAsVacant) , Count(SoldAsVacant)
From PortfolioProject.dbo.NashvilleHousing
Group by SoldAsVacant
Order by 2
--We can do this using a Case Statement
Select SoldAsVacant
,	CASE When SoldAsVacant = 'Y' THEN 'YES'
	     When SoldAsVacant = 'N' THEN 'No'
		 ELSE SoldAsVacant
		 END
From PortfolioProject.dbo.NashvilleHousing

Update NashvilleHousing 
SET SoldAsVacant = CASE When SoldAsVacant = 'Y' THEN 'YES'
	     When SoldAsVacant = 'N' THEN 'No'
		 ELSE SoldAsVacant
		 END

/*
Remove Duplicates. Not standard pratice. ------------------------------------------------
*/


--Write query first, then put into CTE
--Row number, rank, or dense rank work

WITH RowNumCTE AS(
Select *,
	ROW_NUMBER() OVER (
	PARTITION BY ParcelID,
				PropertyAddress, 
				SalePrice, 
				SaleDate,
				LegalReference
				ORDER BY 
					UniqueID
					) row_num


From PortfolioProject.dbo.NashvilleHousing
--order by ParcelID
)
Select * 
From RowNumCTE
Where row_num > 1
--Order by PropertyAddress

Select *
From PortfolioProject.dbo.NashvilleHousing



--Delete unused column------------------------------------------------
--Dont' do this to the raw data import, triple check

Select *
From PortfolioProject.dbo.NashvilleHousing

ALTER TABLE PortfolioProject.dbo.NashvilleHousing
DROP COLUMN OwnerAddress, TaxDistrict, PropertyAddress

ALTER TABLE PortfolioProject.dbo.NashvilleHousing
DROP COLUMN SaleDate

--Our data is much more usable! Converting to standard formats through various methods. 
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------

--- Importing Data using OPENROWSET and BULK INSERT	

--  More advanced and looks cooler, but have to configure server appropriately to do correctly
--  Wanted to provide this in case you wanted to try it


--sp_configure 'show advanced options', 1;
--RECONFIGURE;
--GO
--sp_configure 'Ad Hoc Distributed Queries', 1;
--RECONFIGURE;
--GO


--USE PortfolioProject 

--GO 

--EXEC master.dbo.sp_MSset_oledb_prop N'Microsoft.ACE.OLEDB.12.0', N'AllowInProcess', 1 

--GO 

--EXEC master.dbo.sp_MSset_oledb_prop N'Microsoft.ACE.OLEDB.12.0', N'DynamicParameters', 1 

--GO 


---- Using BULK INSERT

--USE PortfolioProject;
--GO
--BULK INSERT nashvilleHousing FROM 'C:\Temp\SQL Server Management Studio\Nashville Housing Data for Data Cleaning Project.csv'
--   WITH (
--      FIELDTERMINATOR = ',',
--      ROWTERMINATOR = '\n'
--);
--GO


---- Using OPENROWSET
--USE PortfolioProject;
--GO
--SELECT * INTO nashvilleHousing
--FROM OPENROWSET('Microsoft.ACE.OLEDB.12.0',
--    'Excel 12.0; Database=C:\Users\alexf\OneDrive\Documents\SQL Server Management Studio\Nashville Housing Data for Data Cleaning Project.csv', [Sheet1$]);
--GO

